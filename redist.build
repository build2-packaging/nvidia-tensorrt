define redist: file
redist{*}: extension = json

define archive: file
archive{*}: extension = tar

define extract: group

redist{~'/(.+)/'}:
{{
  n        = $name($>)
  manifest = ($<[0])
  redist   = ($<[1])

  cat $path($manifest) \
    | sed -n -e 's/^url:\s*(.*)$/\1/p' \
    | set url [string]

  cat $path($manifest) \
    | sed -n -e 's/^version:\s*([0-9.]+).*$/\1/p' \
    | set local [string]

  json         = [json] $json.load($path($redist))
  json         = [json] ($json["$n"])

  depdb hash $json
  diag redist $redist $>

  pkg          = [json] ($json["$cc.target.class-$cc.target.cpu"])
  pkg_version  = [string] ($json["version"])
  archive      = [path] "$directory($url)/([string] $pkg["relative_path"])"

  if (!$contains($pkg_version, $local))
    echo "$n mismatch: v$local \(local) != v$pkg_version \(remote)"
    exit 1
  end

  if ($null(($json["base_url"])))
    json += ("base_url"@"$directory($url)")
  end
  echo "$json.serialize($json)" >$path($>)
}}

archive{~'/(.+)/'}:
{{
  tar  = $out_root/$leaf($path($>))
  part = $(tar).part

  # extract details from redist.json
  json     = ($<[0])
  meta     = [json] $json.load($path($json))
  pkg      = [json] ($meta["$cc.target.class-$cc.target.cpu"])
  base_url = [string] ($meta["base_url"])
  url      = [path] "$base_url/([string] $pkg["relative_path"])"

  depdb hash $json
  diag curl $url -> $>

  # curl --netrc -c $c "https://developer.nvidia.com/login" <| &$c
  # curl -b $c -O "$url" <|

  # download if missing or broken
  bsdtar -tf $tar >- 2>&1 || \
    curl -\# --netrc --fail --output $part "$url"
  test -f $part && \
    rm -f $tar && mv $part $tar &!$tar || true
  test -f $path($>) || \
    ln --symbolic $tar $path($>)
  touch $path($>)
}}

## Use a fixed name for group to circumvent #463
#  https://github.com/build2/build2/issues/463
extract{archive}:
{{
  o = $posix_representation($directory($>[0]))
  a = $posix_representation($path($<[0]))
  d = "$(a).files"

  pattern = [cmdline] \
    --exclude "*/bin/*32_*" \
    --exclude "*/data/*" \
    --exclude "*/lib/*32_*" \
    --exclude "*/lib32/*" \
    --exclude "*/python/*" \
    --exclude "*_lean_*" \
    --exclude "*_static*" \
    --exclude "*samples*" \
    "*/*/*"

  # extract paths for all relevant files
  depdb dyndep \
    --dyn-target \
    --target-cwd "$o" \
    --target-what 'fetched binaries' \
    --target-default-type 'file' \
    --target-extension-type '=file' \
    --target-extension-type 'h=file' \
    --target-extension-type 'hpp=file' \
    --target-extension-type 'cuh=file' \
    --target-extension-type 'inl=file' \
    --target-extension-type 'a=file' \
    --target-extension-type 'so=file' \
    --target-extension-type 'dylib=file' \
    --target-extension-type 'dll=file' \
    --target-extension-type 'lib=file' \
    --target-extension-type 'exe=file' \
    --format lines \
    --file "$d" \
    -- \
      bsdtar --fast-read -tf "$a" $pattern \
      | sed -n -e 's%^.*?/%%p' \
      | sed -n -e 's%^(.*)/?$%\1%p' \
      | sed -e "s%.+/\$%$d%g" >$d

  # extract all files
  diag bsdtar $< $filter_out($>, group)

  bsdtar -C "$o" -xmf "$a" --strip-components=1 $pattern
  touch $d
}}
